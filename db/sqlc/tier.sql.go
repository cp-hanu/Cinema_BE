// Code generated by sqlc. DO NOT EDIT.
// source: tier.sql

package db

import (
	"context"
)

const createNewTier = `-- name: CreateNewTier :one
INSERT INTO "Tier"(tier_id, tier_name)
VALUES ($1, $2)
RETURNING id, tier_id, tier_name
`

type CreateNewTierParams struct {
	TierID   string `json:"tier_id"`
	TierName string `json:"tier_name"`
}

func (q *Queries) CreateNewTier(ctx context.Context, arg CreateNewTierParams) (Tier, error) {
	row := q.db.QueryRowContext(ctx, createNewTier, arg.TierID, arg.TierName)
	var i Tier
	err := row.Scan(&i.ID, &i.TierID, &i.TierName)
	return i, err
}

const createScheduleTier = `-- name: CreateScheduleTier :one
INSERT INTO "Schedule_Tier"(schedule_id, tier_id, price)
VALUES ($1, $2, $3)
RETURNING id, schedule_id, tier_id, price
`

type CreateScheduleTierParams struct {
	ScheduleID string `json:"schedule_id"`
	TierID     string `json:"tier_id"`
	Price      int64  `json:"price"`
}

func (q *Queries) CreateScheduleTier(ctx context.Context, arg CreateScheduleTierParams) (ScheduleTier, error) {
	row := q.db.QueryRowContext(ctx, createScheduleTier, arg.ScheduleID, arg.TierID, arg.Price)
	var i ScheduleTier
	err := row.Scan(
		&i.ID,
		&i.ScheduleID,
		&i.TierID,
		&i.Price,
	)
	return i, err
}

const deleteTierByTierID = `-- name: DeleteTierByTierID :exec
DELETE
FROM "Tier"
WHERE tier_id = $1
`

func (q *Queries) DeleteTierByTierID(ctx context.Context, tierID string) error {
	_, err := q.db.ExecContext(ctx, deleteTierByTierID, tierID)
	return err
}

const getAllTier = `-- name: GetAllTier :many
SELECT id, tier_id, tier_name
FROM "Tier"
`

func (q *Queries) GetAllTier(ctx context.Context) ([]Tier, error) {
	rows, err := q.db.QueryContext(ctx, getAllTier)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tier{}
	for rows.Next() {
		var i Tier
		if err := rows.Scan(&i.ID, &i.TierID, &i.TierName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTierById = `-- name: GetTierById :one
SELECT id, tier_id, tier_name
FROM "Tier"
WHERE tier_id = $1
`

func (q *Queries) GetTierById(ctx context.Context, tierID string) (Tier, error) {
	row := q.db.QueryRowContext(ctx, getTierById, tierID)
	var i Tier
	err := row.Scan(&i.ID, &i.TierID, &i.TierName)
	return i, err
}

const updateTierPrice = `-- name: UpdateTierPrice :one
UPDATE "Schedule_Tier"
SET price=$3
WHERE schedule_id = $1
  AND tier_id = $2
RETURNING id, schedule_id, tier_id, price
`

type UpdateTierPriceParams struct {
	ScheduleID string `json:"schedule_id"`
	TierID     string `json:"tier_id"`
	Price      int64  `json:"price"`
}

func (q *Queries) UpdateTierPrice(ctx context.Context, arg UpdateTierPriceParams) (ScheduleTier, error) {
	row := q.db.QueryRowContext(ctx, updateTierPrice, arg.ScheduleID, arg.TierID, arg.Price)
	var i ScheduleTier
	err := row.Scan(
		&i.ID,
		&i.ScheduleID,
		&i.TierID,
		&i.Price,
	)
	return i, err
}
