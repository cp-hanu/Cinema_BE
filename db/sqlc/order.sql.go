// Code generated by sqlc. DO NOT EDIT.
// source: order.sql

package db

import (
	"context"
	"database/sql"
)

const createNewOrder = `-- name: CreateNewOrder :one
INSERT INTO "Order"(order_id)
VALUES ($1)
RETURNING id, order_id, created_at
`

func (q *Queries) CreateNewOrder(ctx context.Context, orderID string) (Order, error) {
	row := q.db.QueryRowContext(ctx, createNewOrder, orderID)
	var i Order
	err := row.Scan(&i.ID, &i.OrderID, &i.CreatedAt)
	return i, err
}

const createOrderDrink = `-- name: CreateOrderDrink :one
INSERT INTO "Order_Drink"(order_id, drink_id)
VALUES ($1, $2)
RETURNING id, order_id, drink_id
`

type CreateOrderDrinkParams struct {
	OrderID string `json:"order_id"`
	DrinkID string `json:"drink_id"`
}

func (q *Queries) CreateOrderDrink(ctx context.Context, arg CreateOrderDrinkParams) (OrderDrink, error) {
	row := q.db.QueryRowContext(ctx, createOrderDrink, arg.OrderID, arg.DrinkID)
	var i OrderDrink
	err := row.Scan(&i.ID, &i.OrderID, &i.DrinkID)
	return i, err
}

const createOrderFood = `-- name: CreateOrderFood :one
INSERT INTO "Order_Food"(order_id, food_id)
VALUES ($1, $2)
RETURNING id, order_id, food_id
`

type CreateOrderFoodParams struct {
	OrderID string `json:"order_id"`
	FoodID  string `json:"food_id"`
}

func (q *Queries) CreateOrderFood(ctx context.Context, arg CreateOrderFoodParams) (OrderFood, error) {
	row := q.db.QueryRowContext(ctx, createOrderFood, arg.OrderID, arg.FoodID)
	var i OrderFood
	err := row.Scan(&i.ID, &i.OrderID, &i.FoodID)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE
FROM "Order"
WHERE order_id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, orderID string) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, orderID)
	return err
}

const getListOrderDrink = `-- name: GetListOrderDrink :many
SELECT D.drink_id, name, price, image_url
FROM "Order"
         INNER JOIN "Order_Drink" OD on "Order".order_id = OD.order_id
         INNER JOIN "Drink" D on D.drink_id = OD.drink_id
WHERE OD.order_id = $1
`

type GetListOrderDrinkRow struct {
	DrinkID  string `json:"drink_id"`
	Name     string `json:"name"`
	Price    int64  `json:"price"`
	ImageUrl string `json:"image_url"`
}

func (q *Queries) GetListOrderDrink(ctx context.Context, orderID string) ([]GetListOrderDrinkRow, error) {
	rows, err := q.db.QueryContext(ctx, getListOrderDrink, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetListOrderDrinkRow{}
	for rows.Next() {
		var i GetListOrderDrinkRow
		if err := rows.Scan(
			&i.DrinkID,
			&i.Name,
			&i.Price,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListOrderFood = `-- name: GetListOrderFood :many
SELECT F.food_id, name, price, image_url
FROM "Order"
         INNER JOIN "Order_Food" O on "Order".order_id = O.order_id
         INNER JOIN "Food" F on F.food_id = O.food_id
WHERE O.order_id = $1
`

type GetListOrderFoodRow struct {
	FoodID   string `json:"food_id"`
	Name     string `json:"name"`
	Price    int64  `json:"price"`
	ImageUrl string `json:"image_url"`
}

func (q *Queries) GetListOrderFood(ctx context.Context, orderID string) ([]GetListOrderFoodRow, error) {
	rows, err := q.db.QueryContext(ctx, getListOrderFood, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetListOrderFoodRow{}
	for rows.Next() {
		var i GetListOrderFoodRow
		if err := rows.Scan(
			&i.FoodID,
			&i.Name,
			&i.Price,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderIdByTicketId = `-- name: GetOrderIdByTicketId :one
SELECT O.order_id
FROM "Ticket"
         LEFT JOIN "Order" O on "Ticket".order_id = O.order_id
WHERE ticket_id = $1
`

func (q *Queries) GetOrderIdByTicketId(ctx context.Context, ticketID string) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getOrderIdByTicketId, ticketID)
	var order_id sql.NullString
	err := row.Scan(&order_id)
	return order_id, err
}
