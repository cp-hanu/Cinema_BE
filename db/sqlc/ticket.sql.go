// Code generated by sqlc. DO NOT EDIT.
// source: ticket.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createNewTicket = `-- name: CreateNewTicket :one
INSERT INTO "Ticket"(ticket_id, schedule_id, order_id)
VALUES ($1, $2, $3)
RETURNING id, ticket_id, schedule_id, order_id
`

type CreateNewTicketParams struct {
	TicketID   string         `json:"ticket_id"`
	ScheduleID string         `json:"schedule_id"`
	OrderID    sql.NullString `json:"order_id"`
}

func (q *Queries) CreateNewTicket(ctx context.Context, arg CreateNewTicketParams) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, createNewTicket, arg.TicketID, arg.ScheduleID, arg.OrderID)
	var i Ticket
	err := row.Scan(
		&i.ID,
		&i.TicketID,
		&i.ScheduleID,
		&i.OrderID,
	)
	return i, err
}

const createTicketSeat = `-- name: CreateTicketSeat :one
INSERT INTO "Ticket_Seat"(ticket_id, seat_id)
VALUES ($1, $2)
RETURNING id, ticket_id, seat_id
`

type CreateTicketSeatParams struct {
	TicketID string `json:"ticket_id"`
	SeatID   string `json:"seat_id"`
}

func (q *Queries) CreateTicketSeat(ctx context.Context, arg CreateTicketSeatParams) (TicketSeat, error) {
	row := q.db.QueryRowContext(ctx, createTicketSeat, arg.TicketID, arg.SeatID)
	var i TicketSeat
	err := row.Scan(&i.ID, &i.TicketID, &i.SeatID)
	return i, err
}

const deleteTicket = `-- name: DeleteTicket :exec
DELETE
FROM "Ticket"
WHERE ticket_id = $1
`

func (q *Queries) DeleteTicket(ctx context.Context, ticketID string) error {
	_, err := q.db.ExecContext(ctx, deleteTicket, ticketID)
	return err
}

const getTicketDetail = `-- name: GetTicketDetail :one
SELECT TS.ticket_id,
       S.seat_id,row,"column",
       R.room_id,room_name,
       M.movie_id, movie_name, runtime, genre, status, image_url,
       S2.schedule_id,time_start,time_end
FROM "Ticket"
         INNER JOIN "Ticket_Seat" TS on "Ticket".ticket_id = TS.ticket_id
         INNER JOIN "Seat" S on S.seat_id = TS.seat_id
         INNER JOIN "Schedule" S2 on S2.schedule_id = "Ticket".schedule_id
         INNER JOIN "Movie" M on M.movie_id = S2.movie_id
         INNER JOIN "Room" R on R.room_id = S2.room_id
WHERE TS.ticket_id = $1
`

type GetTicketDetailRow struct {
	TicketID   string    `json:"ticket_id"`
	SeatID     string    `json:"seat_id"`
	Row        string    `json:"row"`
	Column     int32     `json:"column"`
	RoomID     string    `json:"room_id"`
	RoomName   string    `json:"room_name"`
	MovieID    string    `json:"movie_id"`
	MovieName  string    `json:"movie_name"`
	Runtime    int32     `json:"runtime"`
	Genre      string    `json:"genre"`
	Status     string    `json:"status"`
	ImageUrl   string    `json:"image_url"`
	ScheduleID string    `json:"schedule_id"`
	TimeStart  time.Time `json:"time_start"`
	TimeEnd    time.Time `json:"time_end"`
}

func (q *Queries) GetTicketDetail(ctx context.Context, ticketID string) (GetTicketDetailRow, error) {
	row := q.db.QueryRowContext(ctx, getTicketDetail, ticketID)
	var i GetTicketDetailRow
	err := row.Scan(
		&i.TicketID,
		&i.SeatID,
		&i.Row,
		&i.Column,
		&i.RoomID,
		&i.RoomName,
		&i.MovieID,
		&i.MovieName,
		&i.Runtime,
		&i.Genre,
		&i.Status,
		&i.ImageUrl,
		&i.ScheduleID,
		&i.TimeStart,
		&i.TimeEnd,
	)
	return i, err
}

const updateTicket = `-- name: UpdateTicket :one
UPDATE "Ticket"
SET schedule_id=$2,
    order_id=$3
WHERE ticket_id = $1
RETURNING id, ticket_id, schedule_id, order_id
`

type UpdateTicketParams struct {
	TicketID   string         `json:"ticket_id"`
	ScheduleID string         `json:"schedule_id"`
	OrderID    sql.NullString `json:"order_id"`
}

func (q *Queries) UpdateTicket(ctx context.Context, arg UpdateTicketParams) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, updateTicket, arg.TicketID, arg.ScheduleID, arg.OrderID)
	var i Ticket
	err := row.Scan(
		&i.ID,
		&i.TicketID,
		&i.ScheduleID,
		&i.OrderID,
	)
	return i, err
}
