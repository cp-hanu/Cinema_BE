// Code generated by sqlc. DO NOT EDIT.
// source: schedule.sql

package db

import (
	"context"
	"time"
)

const createNewSchedule = `-- name: CreateNewSchedule :one
INSERT INTO "Schedule"(schedule_id, movie_id, room_id, time_start, time_end)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, schedule_id, movie_id, room_id, time_start, time_end
`

type CreateNewScheduleParams struct {
	ScheduleID string    `json:"schedule_id"`
	MovieID    string    `json:"movie_id"`
	RoomID     string    `json:"room_id"`
	TimeStart  time.Time `json:"time_start"`
	TimeEnd    time.Time `json:"time_end"`
}

func (q *Queries) CreateNewSchedule(ctx context.Context, arg CreateNewScheduleParams) (Schedule, error) {
	row := q.db.QueryRowContext(ctx, createNewSchedule,
		arg.ScheduleID,
		arg.MovieID,
		arg.RoomID,
		arg.TimeStart,
		arg.TimeEnd,
	)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.ScheduleID,
		&i.MovieID,
		&i.RoomID,
		&i.TimeStart,
		&i.TimeEnd,
	)
	return i, err
}

const deleteSchedule = `-- name: DeleteSchedule :exec
DELETE
FROM "Schedule"
WHERE schedule_id = $1
`

func (q *Queries) DeleteSchedule(ctx context.Context, scheduleID string) error {
	_, err := q.db.ExecContext(ctx, deleteSchedule, scheduleID)
	return err
}

const getAllAvailableSchedule = `-- name: GetAllAvailableSchedule :many
SELECT S.schedule_id, S.time_start, S.time_end,
       M.movie_id, M.movie_name, M.runtime, M.genre, M.image_url,
       R.room_id,R.room_name
FROM "Schedule" S
         JOIN "Movie" M on M.movie_id = S.movie_id
         JOIN "Room" R on R.room_id = S.room_id
WHERE now() < time_end
`

type GetAllAvailableScheduleRow struct {
	ScheduleID string    `json:"schedule_id"`
	TimeStart  time.Time `json:"time_start"`
	TimeEnd    time.Time `json:"time_end"`
	MovieID    string    `json:"movie_id"`
	MovieName  string    `json:"movie_name"`
	Runtime    int32     `json:"runtime"`
	Genre      string    `json:"genre"`
	ImageUrl   string    `json:"image_url"`
	RoomID     string    `json:"room_id"`
	RoomName   string    `json:"room_name"`
}

func (q *Queries) GetAllAvailableSchedule(ctx context.Context) ([]GetAllAvailableScheduleRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllAvailableSchedule)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllAvailableScheduleRow{}
	for rows.Next() {
		var i GetAllAvailableScheduleRow
		if err := rows.Scan(
			&i.ScheduleID,
			&i.TimeStart,
			&i.TimeEnd,
			&i.MovieID,
			&i.MovieName,
			&i.Runtime,
			&i.Genre,
			&i.ImageUrl,
			&i.RoomID,
			&i.RoomName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllScheduleByMovieId = `-- name: GetAllScheduleByMovieId :many
SELECT S.schedule_id, S.time_start, S.time_end,
       M.movie_id, M.movie_name, M.runtime, M.genre, M.image_url,
       R.room_id,R.room_name
FROM "Schedule" S
         JOIN "Movie" M on M.movie_id = S.movie_id
         JOIN "Room" R on R.room_id = S.room_id
WHERE now() < time_end AND M.movie_id = $1
`

type GetAllScheduleByMovieIdRow struct {
	ScheduleID string    `json:"schedule_id"`
	TimeStart  time.Time `json:"time_start"`
	TimeEnd    time.Time `json:"time_end"`
	MovieID    string    `json:"movie_id"`
	MovieName  string    `json:"movie_name"`
	Runtime    int32     `json:"runtime"`
	Genre      string    `json:"genre"`
	ImageUrl   string    `json:"image_url"`
	RoomID     string    `json:"room_id"`
	RoomName   string    `json:"room_name"`
}

func (q *Queries) GetAllScheduleByMovieId(ctx context.Context, movieID string) ([]GetAllScheduleByMovieIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllScheduleByMovieId, movieID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllScheduleByMovieIdRow{}
	for rows.Next() {
		var i GetAllScheduleByMovieIdRow
		if err := rows.Scan(
			&i.ScheduleID,
			&i.TimeStart,
			&i.TimeEnd,
			&i.MovieID,
			&i.MovieName,
			&i.Runtime,
			&i.Genre,
			&i.ImageUrl,
			&i.RoomID,
			&i.RoomName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListPriceByScheduleId = `-- name: GetListPriceByScheduleId :many
SELECT Schedule_Tier.id, schedule_id, Schedule_Tier.tier_id, price, t.id, t.tier_id, tier_name FROM "Schedule_Tier"
INNER JOIN "Tier" T on T.tier_id = "Schedule_Tier".tier_id
WHERE schedule_id = $1
`

type GetListPriceByScheduleIdRow struct {
	ID         int64  `json:"id"`
	ScheduleID string `json:"schedule_id"`
	TierID     string `json:"tier_id"`
	Price      int64  `json:"price"`
	ID_2       int64  `json:"id_2"`
	TierID_2   string `json:"tier_id_2"`
	TierName   string `json:"tier_name"`
}

func (q *Queries) GetListPriceByScheduleId(ctx context.Context, scheduleID string) ([]GetListPriceByScheduleIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getListPriceByScheduleId, scheduleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetListPriceByScheduleIdRow{}
	for rows.Next() {
		var i GetListPriceByScheduleIdRow
		if err := rows.Scan(
			&i.ID,
			&i.ScheduleID,
			&i.TierID,
			&i.Price,
			&i.ID_2,
			&i.TierID_2,
			&i.TierName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getScheduleByID = `-- name: GetScheduleByID :one
SELECT id, schedule_id, movie_id, room_id, time_start, time_end
FROM "Schedule"
WHERE schedule_id = $1
`

func (q *Queries) GetScheduleByID(ctx context.Context, scheduleID string) (Schedule, error) {
	row := q.db.QueryRowContext(ctx, getScheduleByID, scheduleID)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.ScheduleID,
		&i.MovieID,
		&i.RoomID,
		&i.TimeStart,
		&i.TimeEnd,
	)
	return i, err
}

const updateSchedule = `-- name: UpdateSchedule :one
UPDATE "Schedule"
SET movie_id = $2,
    room_id = $3,
    time_start = $4,
    time_end = $5
WHERE schedule_id = $1
RETURNING id, schedule_id, movie_id, room_id, time_start, time_end
`

type UpdateScheduleParams struct {
	ScheduleID string    `json:"schedule_id"`
	MovieID    string    `json:"movie_id"`
	RoomID     string    `json:"room_id"`
	TimeStart  time.Time `json:"time_start"`
	TimeEnd    time.Time `json:"time_end"`
}

func (q *Queries) UpdateSchedule(ctx context.Context, arg UpdateScheduleParams) (Schedule, error) {
	row := q.db.QueryRowContext(ctx, updateSchedule,
		arg.ScheduleID,
		arg.MovieID,
		arg.RoomID,
		arg.TimeStart,
		arg.TimeEnd,
	)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.ScheduleID,
		&i.MovieID,
		&i.RoomID,
		&i.TimeStart,
		&i.TimeEnd,
	)
	return i, err
}
