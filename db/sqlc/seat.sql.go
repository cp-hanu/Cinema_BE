// Code generated by sqlc. DO NOT EDIT.
// source: seat.sql

package db

import (
	"context"
)

const creatNewSeat = `-- name: CreatNewSeat :one
INSERT INTO "Seat"(seat_id, room_id, tier_id, row, "column", active)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, seat_id, room_id, tier_id, row, "column", active
`

type CreatNewSeatParams struct {
	SeatID string `json:"seat_id"`
	RoomID string `json:"room_id"`
	TierID string `json:"tier_id"`
	Row    string `json:"row"`
	Column int32  `json:"column"`
	Active bool   `json:"active"`
}

func (q *Queries) CreatNewSeat(ctx context.Context, arg CreatNewSeatParams) (Seat, error) {
	row := q.db.QueryRowContext(ctx, creatNewSeat,
		arg.SeatID,
		arg.RoomID,
		arg.TierID,
		arg.Row,
		arg.Column,
		arg.Active,
	)
	var i Seat
	err := row.Scan(
		&i.ID,
		&i.SeatID,
		&i.RoomID,
		&i.TierID,
		&i.Row,
		&i.Column,
		&i.Active,
	)
	return i, err
}

const deleteSeat = `-- name: DeleteSeat :exec
DELETE
FROM "Seat"
WHERE seat_id = $1
`

func (q *Queries) DeleteSeat(ctx context.Context, seatID string) error {
	_, err := q.db.ExecContext(ctx, deleteSeat, seatID)
	return err
}

const getAllSeatByScheduleId = `-- name: GetAllSeatByScheduleId :many
SELECT S.seat_id,
       row,
       "column",
       T.tier_name as "tier",
       ST.price
FROM "Schedule" S2
         INNER JOIN "Room" R on R.room_id = S2.room_id
         INNER JOIN "Seat" S on R.room_id = S.room_id
         INNER JOIN "Tier" T on S.tier_id = T.tier_id
         INNER JOIN "Schedule_Tier" ST on T.tier_id = ST.tier_id
WHERE ST.schedule_id = $1
  AND S2.schedule_id = $1
`

type GetAllSeatByScheduleIdRow struct {
	SeatID string `json:"seat_id"`
	Row    string `json:"row"`
	Column int32  `json:"column"`
	Tier   string `json:"tier"`
	Price  int64  `json:"price"`
}

func (q *Queries) GetAllSeatByScheduleId(ctx context.Context, scheduleID string) ([]GetAllSeatByScheduleIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllSeatByScheduleId, scheduleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllSeatByScheduleIdRow{}
	for rows.Next() {
		var i GetAllSeatByScheduleIdRow
		if err := rows.Scan(
			&i.SeatID,
			&i.Row,
			&i.Column,
			&i.Tier,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSeatInUsedByScheduleId = `-- name: GetSeatInUsedByScheduleId :many
SELECT S.seat_id, row, "column"
FROM "Ticket" T
         INNER JOIN "Ticket_Seat" TS on T.ticket_id = TS.ticket_id
         INNER JOIN "Seat" S ON TS.seat_id = S.seat_id
WHERE schedule_id = $1
`

type GetSeatInUsedByScheduleIdRow struct {
	SeatID string `json:"seat_id"`
	Row    string `json:"row"`
	Column int32  `json:"column"`
}

func (q *Queries) GetSeatInUsedByScheduleId(ctx context.Context, scheduleID string) ([]GetSeatInUsedByScheduleIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getSeatInUsedByScheduleId, scheduleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSeatInUsedByScheduleIdRow{}
	for rows.Next() {
		var i GetSeatInUsedByScheduleIdRow
		if err := rows.Scan(&i.SeatID, &i.Row, &i.Column); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSeatAvailability = `-- name: UpdateSeatAvailability :one
UPDATE "Seat"
SET active=$2
WHERE seat_id = $1
RETURNING id, seat_id, room_id, tier_id, row, "column", active
`

type UpdateSeatAvailabilityParams struct {
	SeatID string `json:"seat_id"`
	Active bool   `json:"active"`
}

func (q *Queries) UpdateSeatAvailability(ctx context.Context, arg UpdateSeatAvailabilityParams) (Seat, error) {
	row := q.db.QueryRowContext(ctx, updateSeatAvailability, arg.SeatID, arg.Active)
	var i Seat
	err := row.Scan(
		&i.ID,
		&i.SeatID,
		&i.RoomID,
		&i.TierID,
		&i.Row,
		&i.Column,
		&i.Active,
	)
	return i, err
}
