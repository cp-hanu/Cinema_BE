// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
)

const createNewUser = `-- name: CreateNewUser :one
INSERT INTO "User"(user_id, user_name, first_name, last_name, password, role)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, user_name, first_name, last_name, password, role
`

type CreateNewUserParams struct {
	UserID    string `json:"user_id"`
	UserName  string `json:"user_name"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Password  string `json:"password"`
	Role      string `json:"role"`
}

func (q *Queries) CreateNewUser(ctx context.Context, arg CreateNewUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createNewUser,
		arg.UserID,
		arg.UserName,
		arg.FirstName,
		arg.LastName,
		arg.Password,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Password,
		&i.Role,
	)
	return i, err
}

const getUserByUserID = `-- name: GetUserByUserID :one
SELECT id, user_id, user_name, first_name, last_name, password, role
FROM "User"
WHERE user_id = $1
`

func (q *Queries) GetUserByUserID(ctx context.Context, userID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUserID, userID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Password,
		&i.Role,
	)
	return i, err
}

const getUserByUserName = `-- name: GetUserByUserName :one
SELECT id, user_id, user_name, first_name, last_name, password, role
FROM "User"
WHERE user_name = $1
`

func (q *Queries) GetUserByUserName(ctx context.Context, userName string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUserName, userName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Password,
		&i.Role,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :one
UPDATE "User"
SET password=$2
WHERE user_id = $1
RETURNING id, user_id, user_name, first_name, last_name, password, role
`

type UpdatePasswordParams struct {
	UserID   string `json:"user_id"`
	Password string `json:"password"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updatePassword, arg.UserID, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Password,
		&i.Role,
	)
	return i, err
}
